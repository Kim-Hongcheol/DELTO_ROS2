import math
import sys

Rm = 14.1     #motor terminal resistance (Ohm)
Kt = 0.8     #motor torque constant (Nm/A)
DOF = 12

tq_u=[0]*12 
duty=[0]*12 

def joint_control(q,q_dot, kp, kd, q_d):
    for i in range (12):
        tq_u[i] = kp[i] * (q_d[i] - q[i]) - kd[i] * (q_dot[i])
    return tq_u

def u2duty(u):
    for i in range (12):
        v = Rm / Kt * u[i]
        duty[i] = 100.0 * (v / 11.0)

        if (duty[i] > 100) :
            duty[i] = 100
        elif (duty[i] < -100) :
            duty[i] = -100
    return duty

def fk(q):

    x=[0]*9
    s=[0]*12 
    c=[0]*12

    for i in range(12) :
        s[i] = math.sin(q[i]) 
        c[i] = math.cos(q[i])

    x[0] = 0.0317*c[0]+0.0434*c[0]*c[2]+0.011*s[0]*s[1]+0.05*c[3]*(c[0]*c[2]+s[0]*s[1]*s[2])-0.05*s[3]*(c[0]*s[2]-c[2]*s[0]*s[1])+0.0434*s[0]*s[1]*s[2]+0.014
    x[1] = 0.0317*s[0]-0.011*c[0]*s[1]+0.0434*c[2]*s[0]+0.05*c[3]*(c[2]*s[0]-c[0]*s[1]*s[2])-0.05*s[3]*(s[0]*s[2]+c[0]*c[2]*s[1])-0.0434*c[0]*s[1]*s[2]
    x[2] = 0.011*c[1]+0.0434*c[1]*s[2]+0.05*c[1]*c[2]*s[3]+0.05*c[1]*c[3]*s[2]

    x[3] = 0.05*s[7]*(c[4]*s[6]-c[6]*s[4]*s[5])-0.0434*c[4]*c[6]-0.011*s[4]*s[5]-0.05*c[7]*(c[4]*c[6]+s[4]*s[5]*s[6])-0.0317*c[4]-0.0434*s[4]*s[5]*s[6]-0.014
    x[4] = 0.011*c[4]*s[5]-0.0317*s[4]-0.0434*c[6]*s[4]-0.05*c[7]*(c[6]*s[4]-c[4]*s[5]*s[6])+0.05*s[7]*(s[4]*s[6]+c[4]*c[6]*s[5])+0.0434*c[4]*s[5]*s[6]+0.0196
    x[5] = 0.011*c[5]+0.0434*c[5]*s[6]+0.05*c[5]*c[6]*s[7]+0.05*c[5]*c[7]*s[6]

    x[6] = 0.05*s[11]*(c[8]*s[10]-c[10]*s[8]*s[9])-0.0434*c[8]*c[10]-0.011*s[8]*s[9]-0.05*c[11]*(c[8]*c[10]+s[8]*s[9]*s[10])-0.0317*c[8]-0.0434*s[8]*s[9]*s[10]-0.014
    x[7] = 0.011*c[8]*s[9]-0.0317*s[8]-0.0434*c[10]*s[8]-0.05*c[11]*(c[10]*s[8]-c[8]*s[9]*s[10])+0.05*s[11]*(s[8]*s[10]+c[8]*c[10]*s[9])+0.0434*c[8]*s[9]*s[10]-0.0196
    x[8] = 0.011*c[9]+0.0434*c[9]*s[10]+0.05*c[9]*c[10]*s[11]+0.05*c[9]*c[11]*s[10]

    return x

def jacob(q) :
    s=[0]*12 
    c=[0]*12
    J=[0]*(9*12)

    for i in range(12) :
        s[i] = math.sin(q[i]) 
        c[i] = math.cos(q[i])

    J[12*0+0] = 0.011*c[0]*s[1]-0.0317*s[0]-0.0434*c[2]*s[0]-0.05*c[3]*(c[2]*s[0]-c[0]*s[1]*s[2])+0.05*s[3]*(s[0]*s[2]+c[0]*c[2]*s[1])+0.0434*c[0]*s[1]*s[2]
    J[12*0+1] = s[0]*(0.011*c[1]+0.0434*c[1]*s[2]+0.05*c[1]*c[2]*s[3]+0.05*c[1]*c[3]*s[2])
    J[12*0+2] = s[1]*(0.0434*c[2]*s[0]+0.05*c[3]*(c[2]*s[0]-c[0]*s[1]*s[2])-0.05*s[3]*(s[0]*s[2]+c[0]*c[2]*s[1])-0.0434*c[0]*s[1]*s[2])-c[0]*c[1]*(0.0434*c[1]*s[2]+0.05*c[1]*c[2]*s[3]+0.05*c[1]*c[3]*s[2])
    J[12*0+3] = s[1]*(0.05*c[3]*(c[2]*s[0]-c[0]*s[1]*s[2])-0.05*s[3]*(s[0]*s[2]+c[0]*c[2]*s[1]))-c[0]*c[1]*(0.05*c[1]*c[2]*s[3]+0.05*c[1]*c[3]*s[2])
    J[12*1+0] = 0.0317*c[0]+0.0434*c[0]*c[2]+0.011*s[0]*s[1]+0.05*c[3]*(c[0]*c[2]+s[0]*s[1]*s[2])-0.05*s[3]*(c[0]*s[2]-c[2]*s[0]*s[1])+0.0434*s[0]*s[1]*s[2]
    J[12*1+1] = -1.0*c[0]*(0.011*c[1]+0.0434*c[1]*s[2]+0.05*c[1]*c[2]*s[3]+0.05*c[1]*c[3]*s[2])
    J[12*1+2] = -s[1]*(0.0434*c[0]*c[2]+0.05*c[3]*(c[0]*c[2]+s[0]*s[1]*s[2])-0.05*s[3]*(c[0]*s[2]-c[2]*s[0]*s[1])+0.0434*s[0]*s[1]*s[2])-c[1]*s[0]*(0.0434*c[1]*s[2]+0.05*c[1]*c[2]*s[3]+0.05*c[1]*c[3]*s[2])
    J[12*1+3] = -s[1]*(0.05*c[3]*(c[0]*c[2]+s[0]*s[1]*s[2])-0.05*s[3]*(c[0]*s[2]-c[2]*s[0]*s[1]))-c[1]*s[0]*(0.05*c[1]*c[2]*s[3]+0.05*c[1]*c[3]*s[2])
    J[12*2+0] = 0.0
    J[12*2+1] = c[0]*(0.0317*s[0]-0.011*c[0]*s[1]+0.0434*c[2]*s[0]+0.05*c[3]*(c[2]*s[0]-c[0]*s[1]*s[2])-0.05*s[3]*(s[0]*s[2]+c[0]*c[2]*s[1])-0.0434*c[0]*s[1]*s[2])-s[0]*(0.0317*c[0]+0.0434*c[0]*c[2]+0.011*s[0]*s[1]+0.05*c[3]*(c[0]*c[2]+s[0]*s[1]*s[2])-0.05*s[3]*(c[0]*s[2]-c[2]*s[0]*s[1])+0.0434*s[0]*s[1]*s[2])
    J[12*2+2] = c[0]*c[1]*(0.0434*c[0]*c[2]+0.05*c[3]*(c[0]*c[2]+s[0]*s[1]*s[2])-0.05*s[3]*(c[0]*s[2]-c[2]*s[0]*s[1])+0.0434*s[0]*s[1]*s[2])+c[1]*s[0]*(0.0434*c[2]*s[0]+0.05*c[3]*(c[2]*s[0]-c[0]*s[1]*s[2])-0.05*s[3]*(s[0]*s[2]+c[0]*c[2]*s[1])-0.0434*c[0]*s[1]*s[2])
    J[12*2+3] = c[0]*c[1]*(0.05*c[3]*(c[0]*c[2]+s[0]*s[1]*s[2])-0.05*s[3]*(c[0]*s[2]-c[2]*s[0]*s[1]))+c[1]*s[0]*(0.05*c[3]*(c[2]*s[0]-c[0]*s[1]*s[2])-0.05*s[3]*(s[0]*s[2]+c[0]*c[2]*s[1]))

    J[12*3+4] = 0.0317*s[4]-0.011*c[4]*s[5]+0.0434*c[6]*s[4]+0.05*c[7]*(c[6]*s[4]-c[4]*s[5]*s[6])-0.05*s[7]*(s[4]*s[6]+c[4]*c[6]*s[5])-0.0434*c[4]*s[5]*s[6]
    J[12*3+5] = -1.0*s[4]*(0.011*c[5]+0.0434*c[5]*s[6]+0.05*c[5]*c[6]*s[7]+0.05*c[5]*c[7]*s[6])
    J[12*3+6] = c[4]*c[5]*(0.0434*c[5]*s[6]+0.05*c[5]*c[6]*s[7]+0.05*c[5]*c[7]*s[6])-s[5]*(0.0434*c[6]*s[4]+0.05*c[7]*(c[6]*s[4]-c[4]*s[5]*s[6])-0.05*s[7]*(s[4]*s[6]+c[4]*c[6]*s[5])-0.0434*c[4]*s[5]*s[6])
    J[12*3+7] = c[4]*c[5]*(0.05*c[5]*c[6]*s[7]+0.05*c[5]*c[7]*s[6])-s[5]*(0.05*c[7]*(c[6]*s[4]-c[4]*s[5]*s[6])-0.05*s[7]*(s[4]*s[6]+c[4]*c[6]*s[5]))
    J[12*4+4] = 0.05*s[7]*(c[4]*s[6]-c[6]*s[4]*s[5])-0.0434*c[4]*c[6]-0.011*s[4]*s[5]-0.05*c[7]*(c[4]*c[6]+s[4]*s[5]*s[6])-0.0317*c[4]-0.0434*s[4]*s[5]*s[6]
    J[12*4+5] = c[4]*(0.011*c[5]+0.0434*c[5]*s[6]+0.05*c[5]*c[6]*s[7]+0.05*c[5]*c[7]*s[6])
    J[12*4+6] = s[5]*(0.0434*c[4]*c[6]+0.05*c[7]*(c[4]*c[6]+s[4]*s[5]*s[6])-0.05*s[7]*(c[4]*s[6]-c[6]*s[4]*s[5])+0.0434*s[4]*s[5]*s[6])+c[5]*s[4]*(0.0434*c[5]*s[6]+0.05*c[5]*c[6]*s[7]+0.05*c[5]*c[7]*s[6])
    J[12*4+7] = s[5]*(0.05*c[7]*(c[4]*c[6]+s[4]*s[5]*s[6])-0.05*s[7]*(c[4]*s[6]-c[6]*s[4]*s[5]))+c[5]*s[4]*(0.05*c[5]*c[6]*s[7]+0.05*c[5]*c[7]*s[6])
    J[12*5+4] = 0.0
    J[12*5+5] = c[4]*(0.0317*s[4]-0.011*c[4]*s[5]+0.0434*c[6]*s[4]+0.05*c[7]*(c[6]*s[4]-c[4]*s[5]*s[6])-0.05*s[7]*(s[4]*s[6]+c[4]*c[6]*s[5])-0.0434*c[4]*s[5]*s[6])-s[4]*(0.0317*c[4]+0.0434*c[4]*c[6]+0.011*s[4]*s[5]+0.05*c[7]*(c[4]*c[6]+s[4]*s[5]*s[6])-0.05*s[7]*(c[4]*s[6]-c[6]*s[4]*s[5])+0.0434*s[4]*s[5]*s[6])
    J[12*5+6] = c[4]*c[5]*(0.0434*c[4]*c[6]+0.05*c[7]*(c[4]*c[6]+s[4]*s[5]*s[6])-0.05*s[7]*(c[4]*s[6]-c[6]*s[4]*s[5])+0.0434*s[4]*s[5]*s[6])+c[5]*s[4]*(0.0434*c[6]*s[4]+0.05*c[7]*(c[6]*s[4]-c[4]*s[5]*s[6])-0.05*s[7]*(s[4]*s[6]+c[4]*c[6]*s[5])-0.0434*c[4]*s[5]*s[6])
    J[12*5+7] = c[4]*c[5]*(0.05*c[7]*(c[4]*c[6]+s[4]*s[5]*s[6])-0.05*s[7]*(c[4]*s[6]-c[6]*s[4]*s[5]))+c[5]*s[4]*(0.05*c[7]*(c[6]*s[4]-c[4]*s[5]*s[6])-0.05*s[7]*(s[4]*s[6]+c[4]*c[6]*s[5]))

    J[12*6+8] = 0.0317*s[8]-0.011*c[8]*s[9]+0.0434*c[10]*s[8]+0.05*c[11]*(c[10]*s[8]-c[8]*s[9]*s[10])-0.05*s[11]*(s[8]*s[10]+c[8]*c[10]*s[9])-0.0434*c[8]*s[9]*s[10]
    J[12*6+9] = -1.0*s[8]*(0.011*c[9]+0.0434*c[9]*s[10]+0.05*c[9]*c[10]*s[11]+0.05*c[9]*c[11]*s[10])
    J[12*6+10] = c[8]*c[9]*(0.0434*c[9]*s[10]+0.05*c[9]*c[10]*s[11]+0.05*c[9]*c[11]*s[10])-s[9]*(0.0434*c[10]*s[8]+0.05*c[11]*(c[10]*s[8]-c[8]*s[9]*s[10])-0.05*s[11]*(s[8]*s[10]+c[8]*c[10]*s[9])-0.0434*c[8]*s[9]*s[10])
    J[12*6+11] = c[8]*c[9]*(0.05*c[9]*c[10]*s[11]+0.05*c[9]*c[11]*s[10])-s[9]*(0.05*c[11]*(c[10]*s[8]-c[8]*s[9]*s[10])-0.05*s[11]*(s[8]*s[10]+c[8]*c[10]*s[9]))
    J[12*7+8] = 0.05*s[11]*(c[8]*s[10]-c[10]*s[8]*s[9])-0.0434*c[8]*c[10]-0.011*s[8]*s[9]-0.05*c[11]*(c[8]*c[10]+s[8]*s[9]*s[10])-0.0317*c[8]-0.0434*s[8]*s[9]*s[10]
    J[12*7+9] = c[8]*(0.011*c[9]+0.0434*c[9]*s[10]+0.05*c[9]*c[10]*s[11]+0.05*c[9]*c[11]*s[10])
    J[12*7+10] = s[9]*(0.0434*c[8]*c[10]+0.05*c[11]*(c[8]*c[10]+s[8]*s[9]*s[10])-0.05*s[11]*(c[8]*s[10]-c[10]*s[8]*s[9])+0.0434*s[8]*s[9]*s[10])+c[9]*s[8]*(0.0434*c[9]*s[10]+0.05*c[9]*c[10]*s[11]+0.05*c[9]*c[11]*s[10])
    J[12*7+11] = s[9]*(0.05*c[11]*(c[8]*c[10]+s[8]*s[9]*s[10])-0.05*s[11]*(c[8]*s[10]-c[10]*s[8]*s[9]))+c[9]*s[8]*(0.05*c[9]*c[10]*s[11]+0.05*c[9]*c[11]*s[10])
    J[12*8+8] = 0.0
    J[12*8+9] = c[8]*(0.0317*s[8]-0.011*c[8]*s[9]+0.0434*c[10]*s[8]+0.05*c[11]*(c[10]*s[8]-c[8]*s[9]*s[10])-0.05*s[11]*(s[8]*s[10]+c[8]*c[10]*s[9])-0.0434*c[8]*s[9]*s[10])-s[8]*(0.0317*c[8]+0.0434*c[8]*c[10]+0.011*s[8]*s[9]+0.05*c[11]*(c[8]*c[10]+s[8]*s[9]*s[10])-0.05*s[11]*(c[8]*s[10]-c[10]*s[8]*s[9])+0.0434*s[8]*s[9]*s[10])
    J[12*8+10] = c[8]*c[9]*(0.0434*c[8]*c[10]+0.05*c[11]*(c[8]*c[10]+s[8]*s[9]*s[10])-0.05*s[11]*(c[8]*s[10]-c[10]*s[8]*s[9])+0.0434*s[8]*s[9]*s[10])+c[9]*s[8]*(0.0434*c[10]*s[8]+0.05*c[11]*(c[10]*s[8]-c[8]*s[9]*s[10])-0.05*s[11]*(s[8]*s[10]+c[8]*c[10]*s[9])-0.0434*c[8]*s[9]*s[10])
    J[12*8+11] = c[8]*c[9]*(0.05*c[11]*(c[8]*c[10]+s[8]*s[9]*s[10])-0.05*s[11]*(c[8]*s[10]-c[10]*s[8]*s[9]))+c[9]*s[8]*(0.05*c[11]*(c[10]*s[8]-c[8]*s[9]*s[10])-0.05*s[11]*(s[8]*s[10]+c[8]*c[10]*s[9]))

    return J

#u = matmul(Jt, 12, 9, f, 9, 1)
#matrix multiplication: m3 = m1 * m2
def matmul(m1, r1, c1, m2, r2, c2):

    tmp=[0]*r1*c2 #tmp mat size

    if (c1 != r2) :
        #print("hi")
        print("matrix format error!")
        sys.exit()

    for i in range(r1): 
        for j in range(c2):
            tmp[(c2*i)+j] = 0
            for k in range(c1): 
                #print(i,j,k)
                tmp[(c2*i)+j] += m1[(c1*i)+k] * m2[(c2*k)+j] 
            #print(i,j)
    
    #print(tmp)
    return tmp

#matrix summation: m3 = m1 + m2
def matsum(m1, m2, row, col) :
    
    tmp=m1

    
    for i in range(row):
        
        for j in range(col):
            tmp[col*i+j] = m1[col*i+j] + m2[col*i+j]

    return tmp


#get a transpose matrix m2 from m1
def transpose(m1, r1, c1) :
    tmp=[0]*(r1*c1)
    
    for i in range(r1):
        for j in range(c1):
            tmp[r1*j+i] = m1[c1*i+j]

    return tmp


def vecnorm(v, n):
    sum = 0
    for i in range(n):
        sum += v[i]*v[i]
    
    sum = math.sqrt(sum)

    if(sum < 0.0000001) :
         sum = 1
    #print(sum)
    return sum

#tmp = vecsub(x, 0, x, 3, 3)
#v3 = v1 - v2
def vecsub(v1, v2, n):
    tmp = [0]*n
    
    for i in range(n): 
        tmp[i] = v1[i] - v2[i]
    
    return tmp

#v3 = v1 + v2
def vecsum(v1, v2, n):
    v3 = v1

    for i in range(n):
        v3[i] = v1[i] + v2[i]
    return v3

#v2 = k*v1
def vecscalar(v1, k, n) :
    
    v2 = v1

    for i in range(n) :
        v2[i] = k*v1[i]

    return v2


def fcont(f, q):
    u=[0]*12
    J=[0]*(9*12)
    Jt=[0]*(12*9)

    J=jacob(q)
    Jt = transpose(J, 9, 12)
    #print("Jt :", len(Jt))
    u = matmul(Jt, 12, 9, f, 9, 1)

    return u

def pinch3_piony(gf, x) :
    f = [0]*9
    tmp = [0]*3

    tmp = vecsub(x[:3], x[3:6], 3) # 1번손가락 위치와 2번 손가락 위치값을 빼주네 // 차이의 벡터? 를 만드는거네.
    norm = vecnorm(tmp, 3)
    f[3:6] = vecscalar(tmp, gf/norm, 3) #2번 손가락이 1번 손가락쪽으로 가는 힘이네.
    #print("1\n",f)

    tmp = vecsub(x[:3], x[6:9], 3)
    norm = vecnorm(tmp, 3)
    f[6:9] = vecscalar(tmp, gf/norm, 3) #2번 손가락이 1번 손가락쪽으로 가는 힘.
    #print("2\n",f)

    tmp = vecsum(f[3:6],f[6:9], 3) #1번 손가락 힘과 2번 손가락 힘의 벡터 함.
    f[0:3] = vecscalar(tmp, -1.0, 3) #1번 손가락이 1번 손가락과 2번 손가락 힘의 벡터합만큼 반대방향으로 힘을내서, 세개 손가락이 마주보게 하는 것이네.
    #print("3\n",f)
    return f


def pinch2(gf, x) :
    f = [0]*9
    tmp = [0]*3

    tmp = vecsub(x[3:6], x[:3], 3)
    norm = vecnorm(tmp, 3)
    f[0:3] = vecscalar(tmp, gf/norm, 3)

    tmp = vecsub(x[:3], x[3:6], 3)
    norm = vecnorm(tmp, 3)
    f[3:6] = vecscalar(tmp, gf/norm, 3)

    f[6] = 0
    f[7] = 0
    f[8] = 0

    return f


def pinch3p(gf, x):
    f = [0]*9
    tmp = [0]*3
    
    tmp1 = [0]*3
    tmp2 = [0]*3
    cg = [0]*3

    #여기 의미를 파악해야되 ! 
    
    tmp1 = vecsum(x[0:3], x[3:6], 3)
    tmp2 = vecsum(tmp1, x[6:9], 3)
    #tmp2까지 오면 손가락 끝점 3개의 중심점을 잡을것이고.
    cg = vecscalar(tmp2, 0.333333, 3)


    tmp1 = vecsub(cg, x[:3], 3)
    #중심점과 손가락 1의 힘방향

    norm = vecnorm(tmp1, 3)
    #이를 다시 벡터화
    f[:3] = vecscalar(tmp1, gf/norm, 3)

    f[3:6] = vecscalar(f[:3], -0.5, 3)
    f[6:9] = vecscalar(f[:3], -0.5, 3)
    #2,3번 손가락은 1번 손가락 힘/2의 반대방향

    return f


#3-finger pinching
def grasp_3f(gf, q) :
    u=[0]*12
    x=[0]*9
    f=[0]*9

    x = fk(q) #fk 정상
    f = pinch3_piony(gf, x)
  
    u = fcont(f, q)
    #print(len(u))

    return u

#2-finger pinching
def grasp_2f(gf, q) :
    u=[0]*12
    x=[0]*9
    f=[0]*9

    x = fk(q) #fk 정상
    f = pinch2(gf, x)
    #print(f)
    u = fcont(f, q)
    #print(u)

    return u

#3-finger parallel pinching
def p_grasp_3f(gf, q):
    u=[0]*12
    x=[0]*9
    f=[0]*9

    x = fk(q)
    f = pinch3p(gf, x)
    u = fcont(f, q)

    return u